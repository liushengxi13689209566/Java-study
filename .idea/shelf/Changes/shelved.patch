Index: algorithm/src/main/java/Temp.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/Temp.java b/algorithm/src/main/java/other/Temp.java
rename from algorithm/src/main/java/Temp.java
rename to algorithm/src/main/java/other/Temp.java
--- a/algorithm/src/main/java/Temp.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/Temp.java	(date 1671626644307)
@@ -1,73 +1,42 @@
-import java.util.ArrayList;
+package other;
+
 import java.util.Arrays;
-import java.util.List;
-import java.util.TreeSet;
 
 /*
-面试题 17.06. 2出现的次数
-编写一个方法，计算从 0 到 n (含 n) 中数字 2 出现的次数。
-示例:
-输入: 25
-输出: 9
-解释: (2, 12, 20, 21, 22, 23, 24, 25)(注意 22 应该算作两次)
-提示：
-n <= 10^9
  * */
 public class Temp {
-    static //输入：words =
-//["I","am","a","student","from","a","university","in","a","student"],
-// word1 = "student", word2 = "a"
-//输出：1
-    class Solution {
-        private int[][] dir = new int[][]{{0, 1}, {1, 0}, {-1, 0}, {0, -1},
-                {1, -1}, {1, 1}, {-1, 1}, {-1, -1}};
-
+    static class Solution {
+        public void merge(int[] A, int m, int[] B, int n) {
+            int index = m + n - 1;
+            int l1 = m - 1;
+            int l2 = n - 1;
 
-        boolean check(int x, int y, int[][] land) {
-            if (x < 0 || x > land.length - 1) return false;
-            if (y < 0 || y > land[0].length - 1) return false;
-            if (land[x][y] != 0) return false;
-            return true;
-        }
-
-        public int[] pondSizes(int[][] land) {
-            List<Integer> res = new ArrayList<>();
-            int size = 0;
-            for (int i = 0; i < land.length; i++) {
-                for (int j = 0; j < land[i].length; j++) {
-                    if (land[i][j] == 0) {
-                        size = dfs(i, j, land);
-                        if (size > 0) res.add(size);
-                    }
-                }
+            while (l1 >= 0 && l2 >= 0) {
+                if (A[l1] >= B[l2]) {
+                    A[index] = A[l1--];
+                } else {
+                    A[index] = B[l2--];
+                }
+                index--;
+            }
+            while (l1 >= 0 && index >= 0) {
+                A[index--] = A[l1--];
+            }
+            while (l2 >= 0 && index >= 0) {
+                A[index--] = B[l2--];
             }
-            //排序，但不去重
-            res.sort(Integer::compareTo);
-            // ArrayList 转 int数组
-            return res.stream().mapToInt(Integer::intValue).toArray();
-        }
 
-        private int dfs(int x, int y, int[][] land) {
-            // 进入dfs，必然意味着通过了 check()
-            int num = 1;
-            //标记该点已经被搜过
-            land[x][y] = -1;
-            for (int i = 0; i < 8; i++) {
-                int xx = x + dir[i][0];
-                int yy = y + dir[i][1];
-                if (check(xx, yy, land)) {
-                    num += dfs(xx, yy, land);
-                }
-            }
-            return num;
+            Arrays.stream(A).forEach(i->{
+                System.out.print(i);
+            });
         }
     }
 
     public static void main(String[] args) {
         Solution solution = new Solution();
-        int[] a = new int[]{-2147483648, 1};
-        int[] b = new int[]{2147483647, 0};
-//        solution.numberOf2sInRange(25);
+        int[] A = new int[]{1, 2, 3, 0, 0, 0};
+        int[] B = new int[]{4, 5, 6};
+        solution.merge(A, 3, B, 3);
     }
 }
 
Index: algorithm/src/main/java/majorityElement.java
===================================================================
diff --git a/algorithm/src/main/java/majorityElement.java b/algorithm/src/main/java/majorityElement.java
deleted file mode 100644
--- a/algorithm/src/main/java/majorityElement.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ /dev/null	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
@@ -1,27 +0,0 @@
-///**
-// * @Date: 2022-03-01 22:38
-// * @Author: liushengxi
-// * @Description:
-// */
-//public class majorityElement {
-//    public class Solution {
-//        // you need to treat n as an unsigned value
-//        public int hammingWeight(int n) {
-//            if (n == 0) {
-//                return 0;
-//            }
-//            int count = 0;
-//            for (int i = 0; i < 32; i++) {
-//                //注意这里：如果写为 == 1 的话，是不对的，因为判断的不一定是最后一位，而是某一位
-//                if ((n & 1) != 0) {
-//                    count++;
-//                }
-//                n >>= 1;
-//            }
-//            return count;
-//        }
-//    }
-//}
-//
-//
-//
Index: algorithm/src/main/java/totalNQueens.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/totalNQueens.java b/algorithm/src/main/java/other/totalNQueens.java
rename from algorithm/src/main/java/totalNQueens.java
rename to algorithm/src/main/java/other/totalNQueens.java
--- a/algorithm/src/main/java/totalNQueens.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/totalNQueens.java	(date 1671346245444)
@@ -1,3 +1,5 @@
+package other;
+
 import java.util.HashSet;
 import java.util.Objects;
 import java.util.Set;
Index: algorithm/src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/Main.java b/algorithm/src/main/java/other/Main.java
rename from algorithm/src/main/java/Main.java
rename to algorithm/src/main/java/other/Main.java
--- a/algorithm/src/main/java/Main.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/Main.java	(date 1671346245466)
@@ -1,5 +1,6 @@
+package other;
+
 import java.util.HashMap;
-import java.util.Scanner;
 
 class Node {
     Integer key;
Index: algorithm/src/main/java/GenericTypes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/GenericTypes.java b/algorithm/src/main/java/other/GenericTypes.java
rename from algorithm/src/main/java/GenericTypes.java
rename to algorithm/src/main/java/other/GenericTypes.java
--- a/algorithm/src/main/java/GenericTypes.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/GenericTypes.java	(date 1671346245464)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-02-27 16:48
  * @Author: liushengxi
Index: algorithm/src/main/java/cuttingRope.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/cuttingRope.java b/algorithm/src/main/java/other/cuttingRope.java
rename from algorithm/src/main/java/cuttingRope.java
rename to algorithm/src/main/java/other/cuttingRope.java
--- a/algorithm/src/main/java/cuttingRope.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/cuttingRope.java	(date 1671346245459)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-03-23 17:40
  * @Author: liushengxi
Index: algorithm/src/main/java/nthUglyNumber.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/nthUglyNumber.java b/algorithm/src/main/java/other/nthUglyNumber.java
rename from algorithm/src/main/java/nthUglyNumber.java
rename to algorithm/src/main/java/other/nthUglyNumber.java
--- a/algorithm/src/main/java/nthUglyNumber.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/nthUglyNumber.java	(date 1671346245451)
@@ -1,3 +1,5 @@
+package other;
+
 import java.util.TreeSet;
 
 /**
Index: algorithm/src/main/java/isAnagram.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/isAnagram.java b/algorithm/src/main/java/other/isAnagram.java
rename from algorithm/src/main/java/isAnagram.java
rename to algorithm/src/main/java/other/isAnagram.java
--- a/algorithm/src/main/java/isAnagram.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/isAnagram.java	(date 1671346245468)
@@ -1,3 +1,5 @@
+package other;
+
 import java.util.HashMap;
 import java.util.Map;
 
Index: algorithm/src/main/java/isPowerOfTwo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/isPowerOfTwo.java b/algorithm/src/main/java/other/isPowerOfTwo.java
rename from algorithm/src/main/java/isPowerOfTwo.java
rename to algorithm/src/main/java/other/isPowerOfTwo.java
--- a/algorithm/src/main/java/isPowerOfTwo.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/isPowerOfTwo.java	(date 1671346245454)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-03-05 14:19
  * @Author: liushengxi
Index: algorithm/src/main/java/MyPow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/MyPow.java b/algorithm/src/main/java/other/MyPow.java
rename from algorithm/src/main/java/MyPow.java
rename to algorithm/src/main/java/other/MyPow.java
--- a/algorithm/src/main/java/MyPow.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/MyPow.java	(date 1671346245456)
@@ -1,3 +1,5 @@
+package other;
+
 import org.junit.Test;
 
 /**
Index: algorithm/src/main/java/KthLargest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/KthLargest.java b/algorithm/src/main/java/other/KthLargest.java
rename from algorithm/src/main/java/KthLargest.java
rename to algorithm/src/main/java/other/KthLargest.java
--- a/algorithm/src/main/java/KthLargest.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/KthLargest.java	(date 1671346245476)
@@ -1,3 +1,5 @@
+package other;
+
 import java.util.PriorityQueue;
 
 /**
Index: algorithm/src/main/java/findNumberIn2DArray.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/findNumberIn2DArray.java b/algorithm/src/main/java/other/findNumberIn2DArray.java
rename from algorithm/src/main/java/findNumberIn2DArray.java
rename to algorithm/src/main/java/other/findNumberIn2DArray.java
--- a/algorithm/src/main/java/findNumberIn2DArray.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/findNumberIn2DArray.java	(date 1671346245461)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-03-22 19:33
  * @Author: liushengxi
Index: algorithm/src/main/java/climbStairs.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/climbStairs.java b/algorithm/src/main/java/other/climbStairs.java
rename from algorithm/src/main/java/climbStairs.java
rename to algorithm/src/main/java/other/climbStairs.java
--- a/algorithm/src/main/java/climbStairs.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/climbStairs.java	(date 1671346245448)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-03-05 14:51
  * @Author: liushengxi
Index: algorithm/src/main/java/hammingWeight.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/hammingWeight.java b/algorithm/src/main/java/other/hammingWeight.java
rename from algorithm/src/main/java/hammingWeight.java
rename to algorithm/src/main/java/other/hammingWeight.java
--- a/algorithm/src/main/java/hammingWeight.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/hammingWeight.java	(date 1671346245470)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-03-05 14:00
  * @Author: liushengxi
Index: algorithm/src/main/java/leftRight/merge.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/leftRight/merge.java b/algorithm/src/main/java/leftRight/merge.java
new file mode 100644
--- /dev/null	(date 1671626880822)
+++ b/algorithm/src/main/java/leftRight/merge.java	(date 1671626880822)
@@ -0,0 +1,73 @@
+package leftRight;
+
+/**
+https://leetcode.cn/problems/sorted-merge-lcci/description/
+
+面试题 10.01. 合并排序的数组
+简单
+163
+相关企业
+
+给定两个排序后的数组 A 和 B，其中 A 的末端有足够的缓冲空间容纳 B。 编写一个方法，将 B 合并入 A 并排序。
+
+初始化 A 和 B 的元素数量分别为 m 和 n。
+
+示例:
+
+输入:
+A = [1,2,3,0,0,0], m = 3
+B = [2,5,6],       n = 3
+
+输出: [1,2,2,3,5,6]
+
+说明:
+
+    A.length == n + m
+
+# 思路：
+ 方法三：逆向双指针
+
+ 算法
+
+ 方法二中，之所以要使用临时变量，是因为如果直接合并到数组 AAA 中，AAA 中的元素可能会在取出之前被覆盖。那么如何直接避免覆盖 AAA 中的元素呢？
+ 观察可知，AAA 的后半部分是空的，可以直接覆盖而不会影响结果。因此可以指针设置为从后向前遍历，每次取两者之中的较大者放进 AAA 的最后面。
+
+ 时间：O(m+n)
+ 空间：O(1)
+
+ 作者：力扣官方题解
+ 链接：https://leetcode.cn/problems/sorted-merge-lcci/solutions/124952/mian-shi-ti-1001-he-bing-pai-xu-de-shu-zu-by-leetc/
+ 来源：力扣（LeetCode）
+ 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
+
+* */
+
+public class merge {
+    class Solution {
+        public void merge(int[] A, int m, int[] B, int n) {
+
+            int index = m + n - 1;
+            int l1 = m - 1;
+            int l2 = n - 1;
+
+            while (l1 >= 0 && l2 >= 0) {
+                if (A[l1] >= B[l2]) {
+                    A[index] = A[l1--];
+                } else {
+                    A[index] = B[l2--];
+                }
+                index--;
+            }
+            while (l1 >= 0 && index >= 0) {
+                A[index--] = A[l1--];
+            }
+            while (l2 >= 0 && index >= 0) {
+                A[index--] = B[l2--];
+            }
+
+            // Arrays.stream(A).forEach(i->{
+            //     System.out.println(i);
+            // });
+        }
+    }
+}
Index: algorithm/src/main/java/other/majorityElement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package other;\n\n/*\n面试题 17.10. 主要元素\n\n数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。若没有，返回 -1 。请设计时间复杂度为 O(N) 、空间复杂度为 O(1) 的解决方案。\n\n\n\n示例 1：\n\n输入：[1,2,5,9,5,9,5,5,5]\n输出：5\n\n示例 2：\n\n输入：[3,2]\n输出：-1\n\n示例 3：\n\n输入：[2,2,1,1,1,2,2]\n输出：2\n\n\n* 摩尔投票法，当年评论区大哥用打仗来做比喻的例子还很生动。\n\n说多国开战，各方军队每次派一个士兵来两两单挑，每次单挑士兵见面一定会和对方同归于尽，最后只要哪边还有人活着就算胜利，那么最后一定是没有人活着，或者活下来的都是同一势力。\n\n那么活下来的势力一定就是参战中势力最雄厚的嘛(指人最多)？不是的，假设总共有2n+1个士兵参战，其中n个属于一方，另n个属于另一方，\n* 最后一方势力只有一个人，也许前两方杀红了眼两败俱伤了，最后被剩下的一个人捡漏了也是可能的。\n\n那么辛苦杀敌到底是为了什么呢？只为了两件事\n\n    最后活下来的势力未必就是人最多的(也许会被人偷鸡)\n    人最多的势力如果不能活下来，只说明它的势力还不够强大，不足以保证赢得战争的胜利(指人数超过总参战人数的一半)\n    如果最后没有人活下来，说明此次参战的势力中，没有任何一只足够强大到一定会赢得胜利。\n\n严谨的逻辑证明咱不会。。凭理解写下思路，有错误的地方请大佬指正。\n\n所以遍历一遍，每次清除一对不同势力的人，对最后活下来的势力单独验证一下究竟实力如何，对无人生还的情况，直接输出-1.\n* */\npublic class majorityElement {\n    class Solution {\n        // 遍历下一个数字时，若它与之前保存的数字相同，则次数加1，否则次数减1；\n        // 若次数为0，则保存下一个数字，并将次数置为1。遍历结束后，所保存的数字即为所求。最后再判断它是否符合条件。\n        public int majorityElement(int[] nums) {\n            if (nums == null) return -1;\n\n            int value = -1;\n            int count = 0;\n            for (int i = 0; i < nums.length; i++) {\n                // 若当前无人生还，跟踪下一位士兵的势力\n                if (count == 0) {\n                    value = nums[i];\n                }\n                // 下一位士兵是自己人，那么幸存人数++\n                if (value == nums[i]) count++;\n                    // 来了个敌人，同归于尽，幸存人数--\n                else count--;\n            }\n            // 对最后活下来的人单独进行验证\n            count = 0;\n            for (int num : nums) {\n                if (num == value) {\n                    count++;\n                }\n            }\n            return count > nums.length / 2 ? value : -1;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/other/majorityElement.java b/algorithm/src/main/java/other/majorityElement.java
--- a/algorithm/src/main/java/other/majorityElement.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/majorityElement.java	(date 1661621372134)
@@ -1,72 +1,27 @@
-package other;
-
-/*
-面试题 17.10. 主要元素
-
-数组中占比超过一半的元素称之为主要元素。给你一个 整数 数组，找出其中的主要元素。若没有，返回 -1 。请设计时间复杂度为 O(N) 、空间复杂度为 O(1) 的解决方案。
-
-
-
-示例 1：
-
-输入：[1,2,5,9,5,9,5,5,5]
-输出：5
-
-示例 2：
-
-输入：[3,2]
-输出：-1
-
-示例 3：
-
-输入：[2,2,1,1,1,2,2]
-输出：2
-
-
-* 摩尔投票法，当年评论区大哥用打仗来做比喻的例子还很生动。
-
-说多国开战，各方军队每次派一个士兵来两两单挑，每次单挑士兵见面一定会和对方同归于尽，最后只要哪边还有人活着就算胜利，那么最后一定是没有人活着，或者活下来的都是同一势力。
-
-那么活下来的势力一定就是参战中势力最雄厚的嘛(指人最多)？不是的，假设总共有2n+1个士兵参战，其中n个属于一方，另n个属于另一方，
-* 最后一方势力只有一个人，也许前两方杀红了眼两败俱伤了，最后被剩下的一个人捡漏了也是可能的。
-
-那么辛苦杀敌到底是为了什么呢？只为了两件事
-
-    最后活下来的势力未必就是人最多的(也许会被人偷鸡)
-    人最多的势力如果不能活下来，只说明它的势力还不够强大，不足以保证赢得战争的胜利(指人数超过总参战人数的一半)
-    如果最后没有人活下来，说明此次参战的势力中，没有任何一只足够强大到一定会赢得胜利。
-
-严谨的逻辑证明咱不会。。凭理解写下思路，有错误的地方请大佬指正。
-
-所以遍历一遍，每次清除一对不同势力的人，对最后活下来的势力单独验证一下究竟实力如何，对无人生还的情况，直接输出-1.
-* */
-public class majorityElement {
-    class Solution {
-        // 遍历下一个数字时，若它与之前保存的数字相同，则次数加1，否则次数减1；
-        // 若次数为0，则保存下一个数字，并将次数置为1。遍历结束后，所保存的数字即为所求。最后再判断它是否符合条件。
-        public int majorityElement(int[] nums) {
-            if (nums == null) return -1;
-
-            int value = -1;
-            int count = 0;
-            for (int i = 0; i < nums.length; i++) {
-                // 若当前无人生还，跟踪下一位士兵的势力
-                if (count == 0) {
-                    value = nums[i];
-                }
-                // 下一位士兵是自己人，那么幸存人数++
-                if (value == nums[i]) count++;
-                    // 来了个敌人，同归于尽，幸存人数--
-                else count--;
-            }
-            // 对最后活下来的人单独进行验证
-            count = 0;
-            for (int num : nums) {
-                if (num == value) {
-                    count++;
-                }
-            }
-            return count > nums.length / 2 ? value : -1;
-        }
-    }
-}
+///**
+// * @Date: 2022-03-01 22:38
+// * @Author: liushengxi
+// * @Description:
+// */
+//public class majorityElement {
+//    public class Solution {
+//        // you need to treat n as an unsigned value
+//        public int hammingWeight(int n) {
+//            if (n == 0) {
+//                return 0;
+//            }
+//            int count = 0;
+//            for (int i = 0; i < 32; i++) {
+//                //注意这里：如果写为 == 1 的话，是不对的，因为判断的不一定是最后一位，而是某一位
+//                if ((n & 1) != 0) {
+//                    count++;
+//                }
+//                n >>= 1;
+//            }
+//            return count;
+//        }
+//    }
+//}
+//
+//
+//
Index: algorithm/src/main/java/countBits.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/algorithm/src/main/java/countBits.java b/algorithm/src/main/java/other/countBits.java
rename from algorithm/src/main/java/countBits.java
rename to algorithm/src/main/java/other/countBits.java
--- a/algorithm/src/main/java/countBits.java	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/algorithm/src/main/java/other/countBits.java	(date 1671346245474)
@@ -1,3 +1,5 @@
+package other;
+
 /**
  * @Date: 2022-03-05 14:24
  * @Author: liushengxi
Index: .idea/sonarlint/issuestore/index.pb
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\nU\n%GeekTimeExercise/GeekTimeExercise.iml\u0012,0/2/024affc3c64405ca70837e7179c38324dc4e661d\n>\n\u000EJava-study.iml\u0012,1/2/12447ae85662a01d68d59d5a47aae86e2e4a37c2\nr\nBCrazy-Java/src/main/java/com/tattoo/codes/IDEAStudy/IDEAStudy.java\u0012,0/1/01383ceef08349168b7873e01c106ce097dea79b\np\n@Crazy-Java/src/main/java/com/tattoo/codes/test/ProductTitle.java\u0012,0/a/0a594d8cf07837cc7393eb8348d186ca124237a3\nu\nECrazy-Java/src/main/java/com/tattoo/codes/fourteen/TestProcessor.java\u0012,4/7/47819211b6c7ea1f7ba220392ae244edc4a1e8e4\nm\n=Crazy-Java/src/main/java/com/tattoo/codes/IDEAStudy/User.java\u0012,3/1/310e1ea243dea2d104c727859974b09255e7f40e\no\n?Crazy-Java/src/main/java/com/tattoo/codes/fourteen/RunTest.java\u0012,b/9/b9b26ebe0340d4c9030212e31ecb9d700f76eae6\nq\nACrazy-Java/src/main/java/com/tattoo/codes/IDEAStudy/Refactor.java\u0012,8/c/8ca9682af692c0b5f5fe2007201ec43f34bad72e\np\n@Crazy-Java/src/main/java/com/tattoo/codes/fourteen/Testable.java\u0012,4/f/4f46a4b7a4e3a3ba7dac2aec18390f337b1532fb\nm\n=Crazy-Java/src/main/java/com/tattoo/codes/IDEAStudy/chub.java\u0012,c/d/cdaa0b595741303eec65a77d53f66c4d23d53fac\nw\nGCrazy-Java/src/main/java/com/tattoo/codes/seven/TestHashTableError.java\u0012,1/d/1d80143dc3ad959ced7f4c0c04cdd266e8773f9a\nr\nBCrazy-Java/src/test/java/com/tattoo/codes/eighteen/PersonTest.java\u0012,1/b/1be3b5ea666871c58182726cd2b1d7de7229b4c6\nq\nACrazy-Java/src/main/java/com/tattoo/codes/IDEAStudy/chub_tmp.java\u0012,5/b/5b3142c1b514d9129bed8b1a9740e1a206bcc6fa\nc\n3GeekTimeExercise/src/main/java/com/codes/Cache.java\u0012,6/d/6d725cf42dbccb65b85a1dee157ab42c2d9048e6\nu\nECrazy-Java/src/main/java/com/tattoo/codes/eighteen/DynaProxy/Dog.java\u0012,a/e/aeb4fd27279494545535f08a97e848813a4fcf9c\nv\nFCrazy-Java/src/main/java/com/tattoo/codes/fourteen/AnnotationTest.java\u0012,1/3/135fba368c06a9b6e569541a69ebadd13392f37a\no\n?Crazy-Java/src/main/java/com/tattoo/codes/test/ProductInfo.java\u0012,0/b/0b0c6093f1458f1ba97392cb872f40d1f588dd3d\ny\nICrazy-Java/src/main/java/com/tattoo/codes/fourteen/ActionListenerFor.java\u0012,e/2/e2804827984390158168237c90d4f72df24dc2a4\nq\nACrazy-Java/src/main/java/com/tattoo/codes/eighteen/ProxyTest.java\u0012,c/b/cb7928a9c3b934e3a62545b038d3adc0dc8b1cd0\nB\n\u0012Crazy-Java/pom.xml\u0012,a/1/a1aeafadd45ae75ae09c5caa2ea5b42ac47b6148\nu\nECrazy-Java/src/main/java/com/tattoo/codes/nine/TestStringBuilder.java\u0012,1/7/171148e42e36886000a6574ca47192f6db1e04d7\n]\n-Crazy-Java/src/test/java/testStringValue.java\u0012,3/3/338160e75c8e2b95a0c49cac1d11b2fb78dab140\nn\n>Crazy-Java/src/main/java/com/tattoo/codes/nine/TestSystem.java\u0012,5/2/529ec4e78da4117d7e2a16df1f5e510e816cd4fc\nr\nBCrazy-Java/src/main/java/com/tattoo/codes/nine/TestBigDecimal.java\u0012,5/0/5077b721835dfb53d5a6e4b652c6f18a4fb546c3\nn\n>Crazy-Java/src/main/java/com/tattoo/codes/nine/TestRandom.java\u0012,9/d/9d994c782e149edf43037cf8118cb43b67f7b04e\nD\n\u0014Crazy-Java/props.txt\u0012,f/6/f65028bd92039a39341e142c9fdb7b202f405db5\np\n@Crazy-Java/src/main/java/com/tattoo/codes/sixteen/StartDead.java\u0012,d/a/da4c4d5d0e3ffc8a9e60af802b0042819f30b3f3\nU\n%Crazy-Java/src/test/java/Product.java\u0012,b/0/b041a1164837a00b846394e02200fa10fa0d9684\nq\nACrazy-Java/src/main/java/com/tattoo/codes/sixteen/JoinThread.java\u0012,9/6/9649784f7456e64a0e7bb3d2f5acceb54684c63e\ns\nCCrazy-Java/src/main/java/com/tattoo/codes/nine/TestFinallyFlow.java\u0012,4/0/402d5e2a48f068f84c8239c84935db10419d1def\nr\nBCrazy-Java/src/main/java/com/tattoo/codes/sixteen/FristThread.java\u0012,2/7/274aa78c97bc09fa51f5ecb26e0b784943818e82\n9\n\tREADME.md\u0012,8/e/8ec9a00bfd09b3190ac6b22251dbb1aa95a0579d\ns\nCCrazy-Java/src/main/java/com/tattoo/codes/sixteen/SeconeThread.java\u0012,9/5/95a875ed90e83e81fc12c3cdca48249334a596a6\nj\n:Crazy-Java/src/main/java/com/tattoo/codes/eight/Apple.java\u0012,9/2/92839086d04e733c8e38aabdb7c74a9e6f467962\nt\nDCrazy-Java/src/main/java/com/tattoo/codes/eight/UseTypeWildCard.java\u0012,9/a/9a793c95232d461a43bcc9e3cfe1e67ff07052df\nq\nACrazy-Java/src/main/java/com/tattoo/codes/thirteen/ConnMysql.java\u0012,e/f/ef7ff51a2c76d92f4dcd4f0e107dbca3774f6052\no\n?Crazy-Java/src/main/java/com/tattoo/codes/nine/TestFinally.java\u0012,f/3/f3e718c323f3f1d5553f3468331a2b529dcc16a1\nx\nHEffectiveJava/src/main/java/crazyJava/codes/six/TeachableProgrammer.java\u0012,b/a/babf45cc42a42f2153e013f3cef390052026a073\no\n?Crazy-Java/src/main/java/com/tattoo/codes/fourteen/MyClass.java\u0012,1/0/101fbbe95c61973e16757f9aeb1385e4edbd08cc\nt\nDCrazy-Java/src/main/java/com/tattoo/codes/sixteen/sync/TestDraw.java\u0012,5/3/534e1bf353694e3510235ec6dd965194f633bb5f\nu\nECrazy-Java/src/main/java/com/tattoo/codes/sixteen/ThreadPoolTest.java\u0012,a/f/af3b229b93d2703f592a4783f46af1574f47b161\nt\nDEffectiveJava/src/main/java/com/tattoo/codes/two/NutritionFacts.java\u0012,1/2/127987feefe344209755d51b88575639d6222d3a\nv\nFCrazy-Java/src/main/java/com/tattoo/codes/eight/TestGenericMethod.java\u0012,9/e/9e6c5de599de0f56e2dde2208535370c72d5b01d\nx\nHCrazy-Java/src/main/java/com/tattoo/codes/sixteen/Call/CallableTest.java\u0012,9/d/9d30ac513bc93166992a3e36d83068a93c0f14b2\na\n1GeekTimeExercise/src/main/java/com/codes/Tea.java\u0012,8/2/820a4c8129ad0c0067e600483d702ba34e80a2e8\nv\nFCrazy-Java/src/main/java/com/tattoo/codes/sixteen/ThreadLocalTest.java\u0012,6/5/6527a6cef12301506549a23f5ad5678f47628dc6\ny\nICrazy-Java/src/main/java/com/tattoo/codes/testTmp/TestImmutableClass.java\u0012,7/c/7c53fbe8288a1863ed0e159819eef6cbf59b0013\nm\n=Crazy-Java/src/main/java/com/tattoo/codes/fourteen/MyTag.java\u0012,f/a/fa622340500f719985572605fb4cb77c7acb44ca\no\n?EffectiveJava/src/main/java/crazyJava/codes/six/Programmer.java\u0012,f/8/f83c0d7a51bb7feecfe01fa4baa9313f6e8ce72f\nl\n<EffectiveJava/src/main/java/crazyJava/codes/six/Address.java\u0012,b/e/beebed9bcc1c1541e4e7fa11be08dc210d6f1443\nH\n\u0018GeekTimeExercise/pom.xml\u0012,3/c/3c771b221e0acc5aaaae250ebea982ee6d9e0c0f\n{\nKCrazy-Java/src/main/java/com/tattoo/codes/eighteen/ClassLoaderPropTest.java\u0012,1/4/1449e5f57287bbc645e9aff5630ac0ea8e583367\nq\nACrazy-Java/src/main/java/com/tattoo/codes/eighteen/ClassTest.java\u0012,b/c/bc84d43ec22570a78e906e0e69bd56f2fa614c85\nv\nFCrazy-Java/src/main/java/com/tattoo/codes/sixteen/sync/DrawThread.java\u0012,f/7/f764731344dfbc2887c15a5aa2920c0f97f55122\ny\nICrazy-Java/src/main/java/com/tattoo/codes/sixteen/sync/DepositThread.java\u0012,3/9/3977477d543f563813432518d1e47d3d4fc130f0\nu\nECrazy-Java/src/main/java/com/tattoo/codes/exception/TestTryCatch.java\u0012,3/3/33636b23c5e257facb45373d7b64d50ada54a9a0\ne\n5Crazy-Java/src/main/java/com/tattoo/codes/Status.java\u0012,f/9/f9d58d71f51c89edd5f7daf9a8fe5613d958a4e8\ni\n9Crazy-Java/src/main/java/com/tattoo/codes/SelectDemo.java\u0012,6/6/66415cbb643fb8eba10f4b1929807d4f7c222aad\nm\n=Crazy-Java/src/main/java/com/tattoo/codes/seven/AccmuQps.java\u0012,0/1/01d48ca792e7942c199612b1ce8c93800f461924\ns\nCCrazy-Java/src/main/java/com/tattoo/codes/sixteen/sync/Account.java\u0012,a/0/a0bd535142b79607e2bc905443d782d44a879128\nu\nECrazy-Java/src/main/java/com/tattoo/codes/eighteen/BootstrapTest.java\u0012,2/9/29dc5182ff6e67b39ad0d0d30eeaab9e54ae6a80\nE\n\u0015EffectiveJava/pom.xml\u0012,7/6/763c5e63e2a693825a07ce30e1172debce6fed12\nv\nFCrazy-Java/src/main/java/com/tattoo/codes/eighteen/DynaProxy/Test.java\u0012,3/4/3414a6d7e7045432766e5405eb67e034a89a14d7\nq\nACrazy-Java/src/main/java/com/tattoo/codes/sixteen/DrawThread.java\u0012,1/f/1ffe6f5c2256f0953ebb291cde481100b9167cbd\n�\u0001\nPCrazy-Java/src/main/java/com/tattoo/codes/eighteen/DynaProxy/MyProxyFactory.java\u0012,8/a/8ad3f801afde39b652643ebc0ab06d438a7a5e51\no\n?Crazy-Java/src/main/java/com/tattoo/codes/sixteen/TestDraw.java\u0012,6/d/6df48f8bb742efeb60a107199d0cb561c13b7d6f\ny\nICrazy-Java/src/main/java/com/tattoo/codes/eighteen/YeeKuObjectFactor.java\u0012,1/d/1d6b7dfe67dcd4e83a7fef39ae250d97be28a240\nx\nHCrazy-Java/src/main/java/com/tattoo/codes/eighteen/DynaProxy/GunDog.java\u0012,3/0/30fe3f56379552432c187141bd3d493cb4ce0a2f\n\u007F\nOCrazy-Java/src/main/java/com/tattoo/codes/fourteen/ActionListenerInstaller.java\u0012,a/6/a6f95d3b65fb351b487c17861584514cee3ef285\ns\nCCrazy-Java/src/main/java/com/tattoo/codes/sixteen/Account_Lock.java\u0012,a/5/a5eb63020743406d5e9ca8a3398de270bb3f1894\n�\u0001\nUCrazy-Java/src/main/java/com/tattoo/codes/eighteen/DynaProxy/MyInvocationHandler.java\u0012,5/9/59404ee8f2a21df2cbab4c48a4c8b46c39632e1d\n7\n\u0007LICENSE\u0012,0/3/0398ccd0f49298b10a3d76a47800d2ebecd49859\ny\nICrazy-Java/src/main/java/com/tattoo/codes/eighteen/DynaProxy/DogUtil.java\u0012,1/2/121b6f750a4db1cd169cb17ce46bc3800e4307d4\nn\n>Crazy-Java/src/main/java/com/tattoo/codes/eighteen/Person.java\u0012,b/3/b3e45ab831c086ca8a9f9d09f6cd7ac15ab7d007\ns\nCCrazy-Java/src/main/java/com/tattoo/codes/eighteen/GenericTest.java\u0012,d/5/d5fe7473c655d75783cd73f300949f61079de154\nq\nACrazy-Java/src/main/java/com/tattoo/codes/eighteen/FieldTest.java\u0012,5/0/5001b6e9147e17574c9cf0806e9a68afb1c2c2dd\nz\nJCrazy-Java/src/main/java/com/tattoo/codes/eighteen/YeeKuObjectFactor2.java\u0012,0/a/0a4707eeed9a193576747e3d7243b0a44ad0836e\nu\nECrazy-Java/src/main/java/com/tattoo/codes/fourteen/getAnnotation.java\u0012,b/b/bb48b4bfd23aff81ce8e5fe48e526a6ac2734b06\nn\n>Crazy-Java/src/main/java/com/tattoo/codes/sixteen/Account.java\u0012,3/5/35020f062cd0c236e040c8db6c9de15d649dbdd0\ns\nCEffectiveJava/src/main/java/crazyJava/codes/seven/TestHashSet2.java\u0012,2/0/2041b82c0acb6c1f4b1af1038f383dfaffb466f0\np\n@GeekTimeExercise/src/main/java/com/codes/ThreadPoolExercise.java\u0012,4/9/495b5ecdbb3d0171c344fd826108f82ad3450340\nV\n&WorkTest/src/test/java/TestRemove.java\u0012,7/6/76ad5e60ac7857a5e1ae385593bda7d824f7495b\nu\nEGeekTimeExercise/src/main/java/com/codes/DesignPattern/echo_easy.java\u0012,e/a/ea5ea144f83366e70b03e32d6c4854d32d4dce81\n|\nLGeekTimeExercise/src/main/java/com/codes/DesignPattern/echo_thread_pool.java\u0012,0/e/0e98e32f6f8715cc422c26b9cde1911123cdfa67\ny\nIGeekTimeExercise/src/main/java/com/codes/DesignPattern/testCalculate.java\u0012,9/0/90efeede5565bd7051303b6abd620fde3b93dd33\nt\nDGeekTimeExercise/src/main/java/com/codes/DesignPattern/print_qq.java\u0012,4/a/4aeb04217ef5d72391f5f6a81698ecc39a9d4b1b\nl\n<Thinking_in_java_4th/generics/MultipleInterfaceVariants.java\u0012,1/8/184da9c3cff8ee2c46f63158ab169137ae31a142\nb\n2Thinking_in_java_4th/interfaces/music4/Music4.java\u0012,a/2/a20e22ce7470ed5997a1681f7b193b9b6c8a15d7\nC\n\u0013ThinkInJava/pom.xml\u0012,0/a/0ae48c193cbf76dd38536b9b047fdf29f4841f01\nK\n\u001BThinkInJava/ThinkInJava.iml\u0012,4/a/4ab0576ed551e5885c5f5d689bd12a685c77f423\nu\nEThinkInJava/src/main/java/com/tattoo/interfaces/filters/BandPass.java\u0012,1/5/15eb4467799ffcbbbf5d0a5c8e20989994290ad8\n�\u0001\nQThinkInJava/src/main/java/com/tattoo/interfaces/interfaceprocessor/Processor.java\u0012,3/a/3a71e99ae911e29f8a216bbbe16b724520ecdbcd\n}\nMThinkInJava/src/main/java/com/tattoo/interfaces/interfaceprocessor/Apply.java\u0012,3/b/3b7b3f52229cc18b510aa7f9fddc5b2b9431a8aa\n�\u0001\nWThinkInJava/src/main/java/com/tattoo/interfaces/interfaceprocessor/StringProcessor.java\u0012,a/7/a71d6f3af5d9f91a1965d7752f310ba5bc68fd23\n�\u0001\nWThinkInJava/src/main/java/com/tattoo/interfaces/interfaceprocessor/FilterProcessor.java\u0012,3/2/328e7727e11552db0a38482c6cc8fda93219bbe6\nC\n\u0013JVMExercise/pom.xml\u0012,1/c/1c6d9127b04e6625c30a46f63a7ccbf90af62fb6\ne\n5JVMExercise/src/main/java/RuntimeConstantPoolOOM.java\u0012,a/a/aac9bf00b84f9e0c2d9c9ab6104123c1002b97c5\n]\n-JVMExercise/src/main/java/JavaVMStackSOF.java\u0012,a/d/ad43d668b67d5c8a2534bfb9d7341a9701f42d51\n]\n-JVMExercise/src/main/java/JavaVMStackOOM.java\u0012,d/a/dab553ce276e52d1b301110fc6a582a3f27582f3\nV\n&JVMExercise/src/main/java/HeapOOM.java\u0012,8/c/8cba19dc132b6dcd97ca73e20f70369f674b7b95\nb\n2JVMExercise/src/main/java/ReferenceCountingGC.java\u0012,1/b/1b75cc1f27eea885cf497512f1a0fdd9cd8f6c2d\n_\n/JVMExercise/src/main/java/FinalizeEscapeGC.java\u0012,9/9/99ea285b21ba8626645fc9cb5f87cabf85605b52\n_\n/Thinking_in_java_4th/innerclasses/Parcel11.java\u0012,0/b/0bea1d89ff7e73bbf7805d92157d6c68a71fe728\n^\n.Thinking_in_java_4th/innerclasses/Parcel1.java\u0012,a/a/aa0019a49aae82813ed7d301f501bf22ec49d1e5\nf\n6DesignPatterns/src/main/java/creater/BeansFactory.java\u0012,2/6/2640476442eae4cf5521f2004e9197d8247a0057\nv\nFDesignPatterns/src/main/java/listener/classic/ConcreteObserverTwo.java\u0012,f/5/f521893e37c3704009f1931cd2344d17522785dc\nj\n:DesignPatterns/src/main/java/listener/classic/Message.java\u0012,9/7/97ba07d9091d1413c10609f424eadc1fffeb12d5\nk\n;DesignPatterns/src/main/java/listener/classic/Observer.java\u0012,3/3/33048813a8a15f281cdd31af8f0d29420e303623\nr\nBDesignPatterns/src/main/java/listener/classic/ConcreteSubject.java\u0012,6/f/6f568ee7e3cd05df4b691c10db8632c37723030b\nv\nFDesignPatterns/src/main/java/listener/classic/ConcreteObserverOne.java\u0012,8/2/820c258ebeea4de17778b530ff2419dda51aacea\nj\n:DesignPatterns/src/main/java/listener/classic/Subject.java\u0012,0/6/0650cabbb8d15eaad0773c7095324b6f48fb0056\ng\n7DesignPatterns/src/main/java/listener/classic/Demo.java\u0012,a/6/a64c06b14c68e26628407688c48c614d3559d53d\np\n@DesignPatterns/src/main/java/statepattern/MarioStateMachine.java\u0012,9/c/9c80c8edf09121bf32e5d4c9710091685785d414\nd\n4DesignPatterns/src/main/java/statepattern/State.java\u0012,8/6/86b42c36ff11454d68f72e2c031f4a9e4fc6fea5\nn\n>DesignPatterns/src/main/java/statepattern/ApplicationDemo.java\u0012,c/d/cd23de876c377d58ab3fb121b49f3521f300ba4f\ni\n9DesignPatterns/src/main/java/statepattern/end/IMario.java\u0012,0/5/05534979a1f361ac6ccaf48679f058c1661ae448\nm\n=DesignPatterns/src/main/java/statepattern/end/SuperMario.java\u0012,1/2/1211d665091f872129c76b18aa8dbc7b9ddc3091\nl\n<DesignPatterns/src/main/java/statepattern/end/CapeMario.java\u0012,e/0/e0b223d76eee6747a9bd7af1155b255077383a6b\nr\nBDesignPatterns/src/main/java/statepattern/end/ApplicationDemo.java\u0012,7/6/7667ead8eef0e284d8e0a07ee6abdc5393c327cf\nl\n<DesignPatterns/src/main/java/statepattern/end/FireMario.java\u0012,0/b/0bb5658475eee88dda6aba138cfd4174a78e56a4\nm\n=DesignPatterns/src/main/java/statepattern/end/SmallMario.java\u0012,2/7/27aa914e58c540f7abf7227bba49f6bf0fd2b117\nw\nGDesignPatterns/src/main/java/statepattern/end/MarioStateMachineEnd.java\u0012,e/9/e9c32356e48b7b6fbe5c3c0b47b7afac4ec8a26d\n_\n/DesignPatterns/src/main/java/other/Example.java\u0012,9/9/99ed61740f0bd4f2106bffddd69ed2af9172c543\nd\n4DesignPatterns/src/main/java/other/DynamicArray.java\u0012,c/8/c85634be0845475a56b8218d5d650c75a5f09aee\nj\n:DesignPatterns/src/main/java/other/SortedDynamicArray.java\u0012,4/4/44213c6e7fba25800b6026b5dbcca10df4248c4b\ng\n7DesignPatterns/src/main/java/proxy/IUserController.java\u0012,7/5/7511a0f044778212f720b2c2bc070e4c28ceee24\n^\n.DesignPatterns/src/main/java/proxy/UserVo.java\u0012,3/a/3a5cfa6f617f0b96ece88e1da83ac5dc353ded5e\nh\n8DesignPatterns/src/main/java/proxy/MetricsCollector.java\u0012,5/4/54de37375f1ad6044bf2b5ff6d1f97f5061c6771\nc\n3DesignPatterns/src/main/java/proxy/RequestInfo.java\u0012,0/a/0af69e7f0e3c992458c5afb1e915e6b62bfc75fb\nm\n=DesignPatterns/src/main/java/proxy/MetricsCollectorProxy.java\u0012,e/6/e674cfcc55c807b91e448bcc97daa77a701d57c3\nf\n6DesignPatterns/src/main/java/proxy/UserController.java\u0012,e/6/e6d45941bb3aac8ed985c736a5f7dd58316708bf\n_\n/DesignPatterns/src/main/java/proxy/Example.java\u0012,c/b/cb5503238c079ad704de864eff261ff8920ddcda\nm\n=DesignPatterns/src/main/java/proxy/UserControllerProxy02.java\u0012,4/7/4790d6198b8ef48f3d2ae0059a4d6ba7eaa74126\n`\n0DesignPatterns/src/main/java/bridge/Example.java\u0012,0/4/044bd4873e95c53bc006c49e43b1d787d1905b66\nc\n3DesignPatterns/src/main/java/decorator/Example.java\u0012,e/f/ef3301a52e21299e8f3f20a74ca87c7213eca54d\nm\n=DesignPatterns/src/main/java/listener/P2P/UserController.java\u0012,6/5/656863c45c9e974b3b4ef11550ca2f9c39e6c3e1\nj\n:DesignPatterns/src/main/java/listener/P2P/RegObserver.java\u0012,3/6/36f8a95ed640d02349cb85c2211b2f17e97daa65\nj\n:DesignPatterns/src/main/java/listener/P2P/UserService.java\u0012,a/d/ad6bfe717cf069970d9e56b3263b7240da474647\n_\n/DesignPatterns/src/main/java/listener/Test.java\u0012,e/4/e47087548d10dde6ac7c0897614f593f9867c328\nv\nFDesignPatterns/src/main/java/listener/P2P/RegNotificationObserver.java\u0012,b/1/b198b20bc3904cdeeb583fd7f55a34c77725b52c\ns\nCDesignPatterns/src/main/java/listener/P2P/RegPromotionObserver.java\u0012,9/3/93e39e06020a14825a8cca392a5598827f5a21d7\nb\n2DesignPatterns/src/main/java/listener/P2P/P2P.java\u0012,0/4/040b0fb93bb8bee48aa3085c0c1c88b44c875a0e\ns\nCDesignPatterns/src/main/java/listener/MyEventBus/AsyncEventBus.java\u0012,1/7/17820eca109db8295721195f36d78677dffa0588\no\n?DesignPatterns/src/main/java/listener/MyEventBus/Subscribe.java\u0012,a/4/a44c84917620c98cb82837b94027cb8dd2d16a24\nt\nDDesignPatterns/src/main/java/listener/MyEventBus/ObserverAction.java\u0012,8/1/819413108b6c5ef86e5903ec9a1fac629a6da272\nv\nFDesignPatterns/src/main/java/listener/MyEventBus/ObserverRegistry.java\u0012,9/6/9671979e96064b82be54a569018c88df2489ee67\nn\n>DesignPatterns/src/main/java/listener/MyEventBus/EventBus.java\u0012,0/f/0fd045181146347f2c5f80b0387696cfb2e9a7db\nT\n$DesignPatterns/src/main/java/YY.java\u0012,8/f/8fd1689a9d64cf7a70f0f7ee31a62f55cd7646da\nY\n)JVMExercise/src/main/java/VectorTest.java\u0012,d/1/d1128d563a446f5bd4fdbf3f66442c1f7f0e8ddd\nh\n8SpringStudy/src/main/java/com/tattoo/code/HelloWord.java\u0012,9/9/991e8a9893e2996f766f05288a6b7613c016fff7\nj\n:concurrent/src/main/java/com/tattoo/code/CreateThread.java\u0012,6/4/642d2f33539e9baf359a49ec7f17ff0b4d23041f\nq\nAconcurrent/src/main/java/com/tattoo/code/BrokenPrimeProducer.java\u0012,8/f/8f3d44bd8c377fef4ad7cc936f24a6c84fabbd2c\nk\n;concurrent/src/main/java/com/tattoo/code/PrimeProducer.java\u0012,f/4/f4727c933c44a19b5e51bfe9b882ba4e25a044f4\nY\n)JVMExercise/src/main/java/TestObject.java\u0012,5/0/50263abb2b57d0e5ac9594b370456669076747b1\nf\n6concurrent/src/main/java/com/tattoo/code/TimedRun.java\u0012,d/b/db154d9140c62eb99f50f5182e6f9a0b0d9b3af3\na\n1JVMExercise/src/main/java/EscapeAnalysisDemo.java\u0012,e/f/efc5aeec8a99ee3d86365cbcd92f2ba3ac22b9de\n\\\n,Thinking_in_java_4th/typeinfo/NullRobot.java\u0012,8/a/8ab530911fd83d4bee74ca4b1b5b663eb1b0bb27\nn\n>SpringStudy/src/main/java/com/tattoo/code/JDKDynamicProxy.java\u0012,1/1/11cf46108f324a3e6f31d23897167d7bf27a15a0\nX\n(algorithm/src/main/java/hash/twoSum.java\u0012,1/9/19a29201a627239baf810df52fbc840869fd6201\nA\n\u0011algorithm/pom.xml\u0012,c/e/cec197f833bd7675233ec75a1751159e7df0c97c\nm\n=SpringStudy/src/main/java/com/tattoo/code/CglibProxyTest.java\u0012,6/b/6bd1967bed5d116ab37ffc197a8d92a2695891fc\nZ\n*algorithm/src/main/java/hash/threeSum.java\u0012,e/c/ec13c8f86c8d3cace16e728546543ab5de4f5f3f\nY\n)algorithm/src/main/java/totalNQueens.java\u0012,b/b/bbd9f1e5ecdf8ec58f8ce749bff3f1ff8249c25a\nW\n'algorithm/src/main/java/KthLargest.java\u0012,5/1/514872c046a09e1223ef9e330deefbe76bfa789b\nV\n&algorithm/src/main/java/isAnagram.java\u0012,7/3/737907eac38fa51269d33bdcabdf0dde97e54b21\n\\\n,algorithm/src/main/java/tree/isValidBST.java\u0012,f/b/fb8421dd07fe4d70f3d26d2284c5670d9ec283dc\nY\n)algorithm/src/main/java/GenericTypes.java\u0012,8/3/83db5267da2f77880acf9a7fe9512c451dc6b856\nY\n)JVMExercise/src/main/java/taoyifenxi.java\u0012,5/b/5b8b13636a0592d82184d6199736f20092b02100\nP\n algorithm/src/main/java/LCA.java\u0012,2/a/2a16a77e8b8513061f4c06859d4887255df82fdb\nR\n\"algorithm/src/main/java/MyPow.java\u0012,8/d/8dc7fc1b2c0600137b84cb8ce88f5d1766be9d8d\n\\\n,algorithm/src/main/java/majorityElement.java\u0012,2/2/223a458b9bc7022674e2cbfcba35a16c9014eab9\nZ\n*algorithm/src/main/java/hammingWeight.java\u0012,7/2/72d52e55775a7bf60ad761c3047207af6e26aa73\nY\n)algorithm/src/main/java/isPowerOfTwo.java\u0012,e/4/e4d3c799a1643aa1093fffea98ef80a8f37d5fa2\nV\n&algorithm/src/main/java/countBits.java\u0012,8/0/8066da5ed115bd08341f829f06eefc4af0f6ee87\nX\n(algorithm/src/main/java/climbStairs.java\u0012,2/8/286a9adf4c472cf32ff1e13ba2a88854959e9ae7\nn\n>EffectiveJava/src/main/java/com/tattoo/codes/two/Ensemble.java\u0012,4/a/4a7d88451b223809b30f0bc154b193584c732d05\n\\\n,algorithm/src/main/java/dp/minimumTotal.java\u0012,9/8/98906d218ef022a5944d78a8cfd3ebf756d46e00\nZ\n*algorithm/src/main/java/dp/maxProduct.java\u0012,7/2/723076823de77816b0a20b0c5e5ad6686f67e7c5\nY\n)algorithm/src/main/java/dp/maxProfit.java\u0012,7/e/7ec710f2d3a39514ca3441c6877bb675d8bc5787\ng\n7DesignPatterns/src/main/java/Instance/LazyInstance.java\u0012,9/3/939cb5528fbf251a7705f348c18cad13c5a6b11c\ne\n5DesignPatterns/src/main/java/Instance/KSingleton.java\u0012,3/9/39a8f63a1c33aae045e2554de86adf2572dc2634\nh\n8DesignPatterns/src/main/java/Instance/BackendServer.java\u0012,e/3/e3684bc24f7eeae98e2910c0c6bc645acd93924e\ni\n9DesignPatterns/src/main/java/Instance/HungryInstance.java\u0012,6/3/637078f25d850e83904b2e1c47af1f2fd4845a7c\ng\n7algorithm/src/main/java/search/generateParenthesis.java\u0012,c/c/ccb14092f8e4192dc74e309a5c25911d04569bb4\nh\n8concurrent/src/main/java/com/tattoo/code/PrintAAndB.java\u0012,2/d/2dd9eee2660fc71830d614dafd037d4614063674\nr\nBconcurrent/src/main/java/com/tattoo/code/WaitNotifyThreadTest.java\u0012,c/c/ccecb8eaa28261cb8ce361d915c020ab4ff1658a\nj\n:concurrent/src/main/java/com/tattoo/code/PrintAAndB02.java\u0012,e/d/edbc6f0d15de583d86a2035d6e60d41dffca129e\nj\n:concurrent/src/main/java/com/tattoo/code/PrintAAndB01.java\u0012,b/4/b4e9ea68475c457a41547190f5b31af06e97120d\nj\n:concurrent/src/main/java/com/tattoo/code/PrintAAndB03.java\u0012,6/b/6b4d63efcce4c5208f238510e7503d895238af1a\nY\n)WorkTest/src/main/java/ArrayListTest.java\u0012,1/2/124ce04875da3468eeeb1dd0abd4d44fe6344092\nQ\n!DesignPatterns/DesignPatterns.iml\u0012,9/6/963fb2361eaf9906f0a07f978b0bf070f41b39ed\nU\n%algorithm/src/main/java/union/UF.java\u0012,0/2/02c03936b02b7baedb5a7662c70df592a4f14971\n\\\n,algorithm/src/main/java/union/UFUpgrade.java\u0012,a/8/a8857f81a4aae9b361135cf30324db8b02d2d483\nk\n;DesignPatterns/src/main/java/factory/IRuleConfigParser.java\u0012,8/4/84af133e36e9f31008104e3b71b4a601497dc661\nj\n:DesignPatterns/src/main/java/Instance/ThreadSingleton.java\u0012,1/b/1b0f476cf2a564973af6edc683b183e26c4d7146\nn\n>DesignPatterns/src/main/java/factory/JsonRuleConfigParser.java\u0012,d/1/d17b42029d88407712d74327eba96e9ec1fb677a\nc\n3DesignPatterns/src/main/java/factory/Factory03.java\u0012,0/0/008f3dfa2a2afee90ccfb2903fcab655ed156b57\ni\n9DesignPatterns/src/main/java/factory/SimpleFactory02.java\u0012,8/d/8d147105aec33e0a4930028f5e5ff16a79ef0e5b\ni\n9DesignPatterns/src/main/java/factory/SimpleFactory01.java\u0012,d/2/d2187a043efd8b381eda29081a3c5c17eb10f610\nV\n&algorithm/src/main/java/trie/Trie.java\u0012,6/6/66b37d87ecdd02e4b7f1acc5975160a8acc99016\nZ\n*algorithm/src/main/java/trie/Solution.java\u0012,5/8/58004fe564e5b6f13d928c8f59fa3818aec59899\nV\n&algorithm/src/main/java/trie/Test.java\u0012,3/7/37b280932fefad16f797e9804e2df0cd5f0cc304\nl\n<DesignPatterns/src/main/java/builder/ResourcePoolConfig.java\u0012,4/c/4ceee64b4d55f0062a111369effa75cc4c6c364c\n]\n-DesignPatterns/src/main/java/temple/test.java\u0012,7/6/7674458b81bcdd69fe4b658c663d3cdcae8c1cfb\n[\n+DesignPatterns/src/main/java/duty/demo.java\u0012,9/c/9c73a36be79a89744ff747b500b47ade9b873c39\n]\n-algorithm/src/main/java/minFlipsMonoIncr.java\u0012,c/a/ca4ff3f953f57f22335e2ca4ec1016e898eb9ef8\n]\n-algorithm/src/main/java/str/isPalindrome.java\u0012,d/3/d35189f7e0d4406ebb07e661d38e8cf76455b4a6\nY\n)algorithm/src/main/java/tree/SubTree.java\u0012,8/0/805f7d43fcd764d0234c2ac5aa219a9e6c540ade\nQ\n!algorithm/src/main/java/TTES.java\u0012,2/3/234c7fe6e8c9e9fc4fb0cdfba3efb9a871835406\n_\n/algorithm/src/main/java/search/permutation.java\u0012,5/e/5ed3860c610c012f13ba2464fc85317b1a0265ca\nZ\n*algorithm/src/main/java/nthUglyNumber.java\u0012,9/2/9235bc8988ffa97f17f24a82d122a65ad5517fcf\nP\n algorithm/src/main/java/LCS.java\u0012,b/4/b4901b2238220cbbe4db4d00cc5bf340f0f8b54e\nT\n$algorithm/src/main/java/sumNums.java\u0012,8/3/834ac92f2ed13f0fa136711aedd4de9bfe01b272\n`\n0algorithm/src/main/java/findNumberIn2DArray.java\u0012,1/c/1c362e42dc5cd1ca0c42abb57981ddf75eb13530\n[\n+algorithm/src/main/java/dp/lengthOfLIS.java\u0012,1/b/1b794e03aa06e9aa051135f8f96c09967052d3ed\nU\n%Thinking_in_java_4th/gui/Borders.java\u0012,2/8/287fb20ade09e368eb4b7e9c07c9f23d3a343557\nV\n&Thinking_in_java_4th/OutputVerifier.py\u0012,7/b/7b081be1617486043aca1635e1bcd4dd0c7766e0\nh\n8algorithm/src/main/java/dp/longestCommonSubsequence.java\u0012,e/1/e15aee4d02c21e51071b5152db9b1bc3f912939e\n[\n+algorithm/src/main/java/search/pathSum.java\u0012,a/c/ac45716dfd66b49b08ed58e40247bfbe96fb3c22\n\\\n,algorithm/src/main/java/tree/countNodes.java\u0012,f/1/f1cd54af0a492a5c44a55cb65c96cc3fdb308fee\n[\n+algorithm/src/main/java/dp/Backpack_01.java\u0012,9/4/940c78d53b12e6715b725e2163cf3f6a711ba555\n]\n-DesignPatterns/src/main/java/Application.java\u0012,6/5/65e3771d0a2b42139fc64173cebddf92e06ebcd8\nf\n6algorithm/src/main/java/dp/numFactoredBinaryTrees.java\u0012,b/3/b3daa33af7b812e640b6b7d08a60b1819a2056e5\nX\n(DesignPatterns/src/main/java/Filter.java\u0012,b/3/b349bd2b10086b7f3e6b8ce029722c13163d2bce\n\\\n,DesignPatterns/src/main/java/RpcRequest.java\u0012,7/f/7f0e1720b5a8bab450879a5613d44b131d4801ae\n^\n.DesignPatterns/src/main/java/RpcException.java\u0012,b/5/b5c5c9a5f1a300b519f4d4314c514b4efe3a8d4e\nY\n)algorithm/src/main/java/search/exist.java\u0012,7/0/70458cf88473e350c264d5f9d5f8d249f99380a9\n]\n-algorithm/src/main/java/bit/singleNumber.java\u0012,3/5/35fe5c6ba9fd0c5a768ddc1e5131014fd806d6cd\nd\n4algorithm/src/main/java/LinkList/copyRandomList.java\u0012,1/c/1c3a0f9ba0f8728f4decdcfbb4bf6b0abf77ae57\nf\n6algorithm/src/main/java/LinkList/treeToDoublyList.java\u0012,a/5/a540c14f54ded7820827611eb5ef3932e3d8abd3\nX\n(algorithm/src/main/java/mq/MaxQueue.java\u0012,6/7/6794ab284613ad8851ba1407b0088cf58de71064\nZ\n*algorithm/src/main/java/str/minWindow.java\u0012,0/5/0524a15211079b9323c72151aad448733eee1e66\n^\n.algorithm/src/main/java/math/findNthDigit.java\u0012,6/f/6f8321370d2b453d232e7fcde611f8d1537dd20e\n\\\n,algorithm/src/main/java/tree/levelOrder.java\u0012,a/7/a7e85fed9fc76a497d4e0e755ab32d72049b0bbd\n_\n/algorithm/src/main/java/search/movingCount.java\u0012,a/d/ad890a1f111027a20603ee3d47dd1b8adf15a903
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
--- a/.idea/sonarlint/issuestore/index.pb	(revision 6bd3e72d46c3fe59285cee86335ebf3d10dbf7ae)
+++ b/.idea/sonarlint/issuestore/index.pb	(date 1671626882200)
@@ -1,6 +1,4 @@
 
-U
-%GeekTimeExercise/GeekTimeExercise.iml,0/2/024affc3c64405ca70837e7179c38324dc4e661d
 >
 Java-study.iml,1/2/12447ae85662a01d68d59d5a47aae86e2e4a37c2
 r
@@ -177,8 +175,6 @@
 2Thinking_in_java_4th/interfaces/music4/Music4.java,a/2/a20e22ce7470ed5997a1681f7b193b9b6c8a15d7
 C
 ThinkInJava/pom.xml,0/a/0ae48c193cbf76dd38536b9b047fdf29f4841f01
-K
-ThinkInJava/ThinkInJava.iml,4/a/4ab0576ed551e5885c5f5d689bd12a685c77f423
 u
 EThinkInJava/src/main/java/com/tattoo/interfaces/filters/BandPass.java,1/5/15eb4467799ffcbbbf5d0a5c8e20989994290ad8
 �
@@ -323,32 +319,10 @@
 =SpringStudy/src/main/java/com/tattoo/code/CglibProxyTest.java,6/b/6bd1967bed5d116ab37ffc197a8d92a2695891fc
 Z
 *algorithm/src/main/java/hash/threeSum.java,e/c/ec13c8f86c8d3cace16e728546543ab5de4f5f3f
-Y
-)algorithm/src/main/java/totalNQueens.java,b/b/bbd9f1e5ecdf8ec58f8ce749bff3f1ff8249c25a
-W
-'algorithm/src/main/java/KthLargest.java,5/1/514872c046a09e1223ef9e330deefbe76bfa789b
-V
-&algorithm/src/main/java/isAnagram.java,7/3/737907eac38fa51269d33bdcabdf0dde97e54b21
 \
 ,algorithm/src/main/java/tree/isValidBST.java,f/b/fb8421dd07fe4d70f3d26d2284c5670d9ec283dc
 Y
-)algorithm/src/main/java/GenericTypes.java,8/3/83db5267da2f77880acf9a7fe9512c451dc6b856
-Y
 )JVMExercise/src/main/java/taoyifenxi.java,5/b/5b8b13636a0592d82184d6199736f20092b02100
-P
- algorithm/src/main/java/LCA.java,2/a/2a16a77e8b8513061f4c06859d4887255df82fdb
-R
-"algorithm/src/main/java/MyPow.java,8/d/8dc7fc1b2c0600137b84cb8ce88f5d1766be9d8d
-\
-,algorithm/src/main/java/majorityElement.java,2/2/223a458b9bc7022674e2cbfcba35a16c9014eab9
-Z
-*algorithm/src/main/java/hammingWeight.java,7/2/72d52e55775a7bf60ad761c3047207af6e26aa73
-Y
-)algorithm/src/main/java/isPowerOfTwo.java,e/4/e4d3c799a1643aa1093fffea98ef80a8f37d5fa2
-V
-&algorithm/src/main/java/countBits.java,8/0/8066da5ed115bd08341f829f06eefc4af0f6ee87
-X
-(algorithm/src/main/java/climbStairs.java,2/8/286a9adf4c472cf32ff1e13ba2a88854959e9ae7
 n
 >EffectiveJava/src/main/java/com/tattoo/codes/two/Ensemble.java,4/a/4a7d88451b223809b30f0bc154b193584c732d05
 \
@@ -379,8 +353,6 @@
 :concurrent/src/main/java/com/tattoo/code/PrintAAndB03.java,6/b/6b4d63efcce4c5208f238510e7503d895238af1a
 Y
 )WorkTest/src/main/java/ArrayListTest.java,1/2/124ce04875da3468eeeb1dd0abd4d44fe6344092
-Q
-!DesignPatterns/DesignPatterns.iml,9/6/963fb2361eaf9906f0a07f978b0bf070f41b39ed
 U
 %algorithm/src/main/java/union/UF.java,0/2/02c03936b02b7baedb5a7662c70df592a4f14971
 \
@@ -410,23 +382,11 @@
 [
 +DesignPatterns/src/main/java/duty/demo.java,9/c/9c73a36be79a89744ff747b500b47ade9b873c39
 ]
--algorithm/src/main/java/minFlipsMonoIncr.java,c/a/ca4ff3f953f57f22335e2ca4ec1016e898eb9ef8
-]
 -algorithm/src/main/java/str/isPalindrome.java,d/3/d35189f7e0d4406ebb07e661d38e8cf76455b4a6
 Y
 )algorithm/src/main/java/tree/SubTree.java,8/0/805f7d43fcd764d0234c2ac5aa219a9e6c540ade
-Q
-!algorithm/src/main/java/TTES.java,2/3/234c7fe6e8c9e9fc4fb0cdfba3efb9a871835406
 _
 /algorithm/src/main/java/search/permutation.java,5/e/5ed3860c610c012f13ba2464fc85317b1a0265ca
-Z
-*algorithm/src/main/java/nthUglyNumber.java,9/2/9235bc8988ffa97f17f24a82d122a65ad5517fcf
-P
- algorithm/src/main/java/LCS.java,b/4/b4901b2238220cbbe4db4d00cc5bf340f0f8b54e
-T
-$algorithm/src/main/java/sumNums.java,8/3/834ac92f2ed13f0fa136711aedd4de9bfe01b272
-`
-0algorithm/src/main/java/findNumberIn2DArray.java,1/c/1c362e42dc5cd1ca0c42abb57981ddf75eb13530
 [
 +algorithm/src/main/java/dp/lengthOfLIS.java,1/b/1b794e03aa06e9aa051135f8f96c09967052d3ed
 U
@@ -468,4 +428,44 @@
 \
 ,algorithm/src/main/java/tree/levelOrder.java,a/7/a7e85fed9fc76a497d4e0e755ab32d72049b0bbd
 _
-/algorithm/src/main/java/search/movingCount.java,a/d/ad890a1f111027a20603ee3d47dd1b8adf15a903
\ No newline at end of file
+/algorithm/src/main/java/search/movingCount.java,a/d/ad890a1f111027a20603ee3d47dd1b8adf15a903
+@
+WorkTest/pom.xml,1/f/1f3901edf7315deab26582bed2f04476f0f93889
+C
+SpringStudy/pom.xml,c/9/c93443aeb2682b337b3aa22827328af52da1f0de
+F
+DesignPatterns/pom.xml,5/0/5048c14a6cd904d34aa2d3a571b3b39413912e68
+S
+#.idea/sonarlint/issuestore/index.pb,9/f/9fe84ebb15faf917b7def6236dba604453cc61e0
+w
+GRxJava-study/src/main/java/org/core/AbstractObservableWithUpStream.java,7/8/78c3a5727314259cdf7ec097d513e80cf7bc4f4b
+`
+0RxJava-study/src/main/java/org/core/Emitter.java,3/f/3fca3a7f57a76def07b9ab347468924c40e5dd3e
+a
+1RxJava-study/src/main/java/org/core/Function.java,3/5/35cb5a256e31c4dfeeeb5c36153782f707215276
+`
+0RxJava-study/src/main/java/org/example/Main.java,c/1/c124d0e5e7f1a5997654220e9b97b8c1d6e70d83
+c
+3RxJava-study/src/main/java/org/core/Observable.java,a/8/a8076640c38d0649f2e62dc4167997e1059d1ae4
+i
+9RxJava-study/src/main/java/org/core/ObservableCreate.java,c/3/c321332f0a340e51bf4cbb7002fde7f602b72616
+j
+:RxJava-study/src/main/java/org/core/ObservableFlatMap.java,d/6/d67c9f8e5c71b04ed565e673e0f95f2ef8819b64
+f
+6RxJava-study/src/main/java/org/core/ObservableMap.java,5/d/5dc58d5bbd34049db630603a1b44a91a16831c12
+n
+>RxJava-study/src/main/java/org/core/ObservableOnSubscribe.java,f/8/f878726d8abbfb06040480b348ccbe8b09f12e84
+i
+9RxJava-study/src/main/java/org/core/ObservableSource.java,8/2/8222277752e1f2d95d62acc2a00989b522c27a59
+a
+1RxJava-study/src/main/java/org/core/Observer.java,7/5/75f068ed907b4411e145001c0bf27d3dacc2294d
+D
+RxJava-study/pom.xml,e/b/eba317610788c6b3266238c6f8f01c29f29facef
+7
+pom.xml,4/4/442292b8a7efeabbe4cc176709b833b1792140ec
+]
+-RxJava-study/src/main/java/org/core/test.java,0/e/0ecfabb3642a109cc51ede7d66287aa04002e821
+^
+.algorithm/src/main/java/other/climbStairs.java,4/f/4fb2632fce329308845ca4fde7b6ff5b0c1be0ae
+^
+.algorithm/src/main/java/sort/reversePairs.java,0/8/08d4a989456821ef9316f4e9c4f2662722c3fce0
\ No newline at end of file
diff --git a/algorithm/src/main/java/TTES.java b/algorithm/src/main/java/other/TTES.java
rename from algorithm/src/main/java/TTES.java
rename to algorithm/src/main/java/other/TTES.java
diff --git a/algorithm/src/main/java/sumNums.java b/algorithm/src/main/java/other/sumNums.java
rename from algorithm/src/main/java/sumNums.java
rename to algorithm/src/main/java/other/sumNums.java
diff --git a/algorithm/src/main/java/LCS.java b/algorithm/src/main/java/other/LCS.java
rename from algorithm/src/main/java/LCS.java
rename to algorithm/src/main/java/other/LCS.java
diff --git a/algorithm/src/main/java/LCA.java b/algorithm/src/main/java/other/LCA.java
rename from algorithm/src/main/java/LCA.java
rename to algorithm/src/main/java/other/LCA.java
diff --git a/algorithm/src/main/java/minFlipsMonoIncr.java b/algorithm/src/main/java/other/minFlipsMonoIncr.java
rename from algorithm/src/main/java/minFlipsMonoIncr.java
rename to algorithm/src/main/java/other/minFlipsMonoIncr.java
